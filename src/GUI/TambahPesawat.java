/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import java.util.HashMap;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author ASUS
 */
public class TambahPesawat extends javax.swing.JFrame {

    /**
     * Creates new form TambahPesawat
     */
    public TambahPesawat() {
        initComponents();
        muatDataDariDatabase();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfIdPesawat = new javax.swing.JTextField();
        tfNmPesawat = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPesawat = new javax.swing.JTable();
        btnTambah = new javax.swing.JButton();
        btnUbah = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        btnCetak = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tambah Data Pesawat");

        jPanel4.setBackground(new java.awt.Color(66, 135, 245));
        jPanel4.setForeground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("MS PGothic", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/plane.png"))); // NOI18N
        jLabel4.setText("TAMBAH DATA PESAWAT");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ID Pesawat");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nama Pesawat");

        tblPesawat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Pesawat", "Nama Pesawat"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPesawat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPesawatMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPesawat);

        btnTambah.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/add.png"))); // NOI18N
        btnTambah.setText("Tambah");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        btnUbah.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/edit.png"))); // NOI18N
        btnUbah.setText("Ubah");
        btnUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahActionPerformed(evt);
            }
        });

        btnHapus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/delete.png"))); // NOI18N
        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/back.png"))); // NOI18N
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        btnCetak.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/file.png"))); // NOI18N
        btnCetak.setText("Cetak");
        btnCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCetakActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCetak))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(tfIdPesawat, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tfNmPesawat, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                    .addComponent(btnTambah)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnUbah, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfIdPesawat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfNmPesawat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnTambah)
                            .addComponent(btnHapus)
                            .addComponent(btnUbah)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCetak)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     private void muatDataDariDatabase() {
        String sql = "SELECT id_pesawat, nama_pesawat FROM pesawat";
        try {
            Connection koneksi = config.configDB();
            PreparedStatement statemen = koneksi.prepareStatement(sql);
            ResultSet hasil = statemen.executeQuery();

            DefaultTableModel modelTabel = (DefaultTableModel) tblPesawat.getModel();

            // Hapus baris yang sudah ada
            modelTabel.setRowCount(0);

            while (hasil.next()) {
                Object[] data = {hasil.getString("id_pesawat"), hasil.getString("nama_pesawat")};
                modelTabel.addRow(data);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error saat memuat data dari database: " + e.getMessage());
        }
   }
     
    // Fungsi untuk memeriksa apakah nama pesawat sudah ada dalam database
    private boolean isNamaPesawatExists(String namaPesawat) {
        String sql = "SELECT COUNT(*) FROM pesawat WHERE nama_pesawat = ?";
        try {
            Connection connection = config.configDB();
            PreparedStatement stat = connection.prepareStatement(sql);
            stat.setString(1, namaPesawat);
            ResultSet result = stat.executeQuery();
            result.next();
            int count = result.getInt(1);
            return count > 0;
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error saat memeriksa nama pesawat: " + e);
            return false;
        }
    }
   
    // Fungsi untuk memeriksa apakah nama pesawat sudah ada dalam database (dengan pengecualian untuk pesawat yang sedang diubah)
    private boolean isNamaPesawatExists(String namaPesawat, String idPesawatToExclude) {
        String sql = "SELECT COUNT(*) FROM pesawat WHERE nama_pesawat = ? AND id_pesawat != ?";
        try {
            Connection connection = config.configDB();
            PreparedStatement stat = connection.prepareStatement(sql);
            stat.setString(1, namaPesawat);
            stat.setString(2, idPesawatToExclude);
            ResultSet result = stat.executeQuery();
            result.next();
            int count = result.getInt(1);
            return count > 0;
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error saat memeriksa nama pesawat: " + e);
            return false;
        }
    }
    
    private void tblPesawatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPesawatMouseClicked
        // Mendapatkan baris yang dipilih pada tabel
        int selectedRow = tblPesawat.getSelectedRow();

        // Pastikan ada baris yang dipilih
        if (selectedRow != -1) {
            // Mendapatkan nilai id_kota dari baris yang dipilih
            String idPesawatTerpilih = tblPesawat.getValueAt(selectedRow, 0).toString();

            // Menampilkan data terpilih di dalam JTextField
            tfIdPesawat.setText(tblPesawat.getValueAt(selectedRow, 0).toString());
            tfNmPesawat.setText(tblPesawat.getValueAt(selectedRow, 1).toString());
        }
    }//GEN-LAST:event_tblPesawatMouseClicked

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        // Ambil nilai dari input fields
        String idPesawat = tfIdPesawat.getText();
        String namaPesawat = tfNmPesawat.getText();

        // Validasi input kosong
        if (idPesawat.isEmpty() || namaPesawat.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Harap lengkapi semua field", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validasi nama pesawat tidak boleh sama dengan data yang sudah ada
        if (isNamaPesawatExists(namaPesawat)) {
            JOptionPane.showMessageDialog(this, "Nama pesawat sudah ada dalam database", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Menyimpan data ke dalam database
        String sql = "INSERT INTO pesawat (id_pesawat, nama_pesawat) VALUES (?, ?)";
        try {
            // Mendapatkan koneksi dari config class
            Connection connection = config.configDB();

            // Membuat prepared statement
            PreparedStatement stat = connection.prepareStatement(sql);
            stat.setString(1, idPesawat);
            stat.setString(2, namaPesawat);

            // Mengeksekusi query
            stat.executeUpdate();

            JOptionPane.showMessageDialog(null, "Data Berhasil Disimpan");

            // Kosongkan JTextField setelah penyimpanan berhasil
            tfIdPesawat.setText("");
            tfNmPesawat.setText("");

            // Panggil metode untuk memuat ulang data dari database ke dalam tabel
            muatDataDariDatabase();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Data Gagal Disimpan" + e);
        }
    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahActionPerformed
        // Ambil nilai dari input fields
        String idPesawat = tfIdPesawat.getText();
        String namaPesawat = tfNmPesawat.getText();

        // Validasi input kosong
        if (idPesawat.isEmpty() || namaPesawat.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Harap lengkapi semua field", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validasi nama pesawat tidak boleh sama dengan data yang sudah ada
        if (isNamaPesawatExists(namaPesawat, idPesawat)) {
            JOptionPane.showMessageDialog(this, "Nama pesawat sudah ada dalam database", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Mendapatkan nilai id_pesawat dari JTextField
        String idPesawatTerpilih = tfIdPesawat.getText();

        // Menyimpan perubahan ke dalam database
        String sql = "UPDATE pesawat SET id_pesawat=?, nama_pesawat=? WHERE id_pesawat=?";
        try {
            // Mendapatkan koneksi dari config class
            Connection connection = config.configDB();

            // Membuat prepared statement
            PreparedStatement stat = connection.prepareStatement(sql);
            stat.setString(1, idPesawat);
            stat.setString(2, namaPesawat);
            stat.setString(3, idPesawatTerpilih);

            // Mengeksekusi query
            stat.executeUpdate();

            JOptionPane.showMessageDialog(null, "Data Berhasil Diubah");

            // Kosongkan JTextField setelah penyimpanan berhasil
            tfIdPesawat.setText("");
            tfNmPesawat.setText("");

            // Panggil metode untuk memuat ulang data dari database ke dalam tabel
            muatDataDariDatabase();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Data Gagal Diubah" + e);
        }
    }//GEN-LAST:event_btnUbahActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // Mendapatkan baris yang dipilih pada tabel
        int selectedRow = tblPesawat.getSelectedRow();

        // Pastikan ada baris yang dipilih
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih baris yang ingin dihapus", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Mendapatkan nilai id_kota dari baris yang dipilih
        String idPesawatTerpilih = tblPesawat.getValueAt(selectedRow, 0).toString();

        // Konfirmasi pengguna sebelum menghapus
        int option = JOptionPane.showConfirmDialog(this, "Anda yakin ingin menghapus data ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            // Hapus data dari database
            String sql = "DELETE FROM pesawat WHERE id_pesawat=?";
            try {
                // Mendapatkan koneksi dari config class
                Connection connection = config.configDB();

                // Membuat prepared statement
                PreparedStatement stat = connection.prepareStatement(sql);
                stat.setString(1, idPesawatTerpilih);

                // Mengeksekusi query
                stat.executeUpdate();

                JOptionPane.showMessageDialog(null, "Data Berhasil Dihapus");

                // Panggil metode untuk memuat ulang data dari database ke dalam tabel
                muatDataDariDatabase();

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Data Gagal Dihapus" + e);
            }
        }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        new MenuUtama().setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel9MouseClicked

    private void btnCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCetakActionPerformed
        try {
            String reportPath = "src/Report/LaporanDataPesawat.jasper";
            Connection koneksi = config.configDB();

            HashMap<String, Object> parameters = new HashMap<>();
            JasperPrint print = JasperFileManager.fillReport(reportPath, parameters, koneksi);
            JasperViewer viewer = new JasperViewer(print, false);
            viewer.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Displaying Report: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCetakActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TambahPesawat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TambahPesawat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TambahPesawat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TambahPesawat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TambahPesawat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCetak;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnUbah;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPesawat;
    private javax.swing.JTextField tfIdPesawat;
    private javax.swing.JTextField tfNmPesawat;
    // End of variables declaration//GEN-END:variables
}
